def listToParams(l):
    s = l[0]
    for i in l:
        if i == l[0]:
            continue
        s = s+", "+ i
    return exec(s)

#repo constructor
def __init__(self, id , node_id , name , full_name , private , owner , html_url , description , fork , url , forks_url , keys_url , collaborators_url , teams_url , hooks_url , issue_events_url , events_url , assignees_url , branches_url , tags_url , blobs_url , git_tags_url , git_refs_url , trees_url , statuses_url , languages_url , stargazers_url , contributors_url , subscribers_url , subscription_url , commits_url , git_commits_url , comments_url , issue_comment_url , contents_url , compare_url , merges_url , archive_url , downloads_url , issues_url , pulls_url , milestones_url , notifications_url , labels_url , releases_url , deployments_url , created_at , updated_at , pushed_at , git_url , ssh_url , clone_url , svn_url , homepage , size , stargazers_count , watchers_count , language , has_issues , has_projects , has_downloads , has_wiki , has_pages , forks_count , mirror_url , archived , disabled , open_issues_count , license , forks , open_issues , watchers , default_branch , permissions , allow_squash_merge , allow_merge_commit , allow_rebase_merge , network_count , subscribers_count ):
    self.id = id
    self.node_id = node_id
    self.name = name
    self.full_name = full_name
    self.private = private
    self.owner = owner
    self.html_url = html_url
    self.description = description
    self.fork = fork
    self.url = url
    self.forks_url = forks_url
    self.keys_url = keys_url
    self.collaborators_url = collaborators_url
    self.teams_url = teams_url
    self.hooks_url = hooks_url
    self.issue_events_url = issue_events_url
    self.events_url = events_url
    self.assignees_url = assignees_url
    self.branches_url = branches_url
    self.tags_url = tags_url
    self.blobs_url = blobs_url
    self.git_tags_url = git_tags_url
    self.git_refs_url = git_refs_url
    self.trees_url = trees_url
    self.statuses_url = statuses_url
    self.languages_url = languages_url
    self.stargazers_url = stargazers_url
    self.contributors_url = contributors_url
    self.subscribers_url = subscribers_url
    self.subscription_url = subscription_url
    self.commits_url = commits_url
    self.git_commits_url = git_commits_url
    self.comments_url = comments_url
    self.issue_comment_url = issue_comment_url
    self.contents_url = contents_url
    self.compare_url = compare_url
    self.merges_url = merges_url
    self.archive_url = archive_url
    self.downloads_url = downloads_url
    self.issues_url = issues_url
    self.pulls_url = pulls_url
    self.milestones_url = milestones_url
    self.notifications_url = notifications_url
    self.labels_url = labels_url
    self.releases_url = releases_url
    self.deployments_url = deployments_url
    self.created_at = created_at
    self.updated_at = updated_at
    self.pushed_at = pushed_at
    self.git_url = git_url
    self.ssh_url = ssh_url
    self.clone_url = clone_url
    self.svn_url = svn_url
    self.homepage = homepage
    self.size = size
    self.stargazers_count = stargazers_count
    self.watchers_count = watchers_count
    self.language = language
    self.has_issues = has_issues
    self.has_projects = has_projects
    self.has_downloads = has_downloads
    self.has_wiki = has_wiki
    self.has_pages = has_pages
    self.forks_count = forks_count
    self.mirror_url = mirror_url
    self.archived = archived
    self.disabled = disabled
    self.open_issues_count = open_issues_count
    self.license = license
    self.forks = forks
    self.open_issues = open_issues
    self.watchers = watchers
    self.default_branch = default_branch
    self.permissions = permissions
    self.allow_squash_merge = allow_squash_merge
    self.allow_merge_commit = allow_merge_commit
    self.allow_rebase_merge = allow_rebase_merge
    self.network_count = network_count
    self.subscribers_count = subscribers_count

#user constructor
def __init__(self, login , id , node_id , avatar_url , gravatar_id , url , html_url , followers_url , following_url , gists_url , starred_url , subscriptions_url , organizations_url , repos_url , events_url , received_events_url , type , site_admin , name , company , blog , location , email , hireable , bio , public_repos , public_gists , followers , following , created_at , updated_at , private_gists , total_private_repos , owned_private_repos , disk_usage , collaborators , two_factor_authentication , plan ):
    self.login = login
    self.id = id
    self.node_id = node_id
    self.avatar_url = avatar_url
    self.gravatar_id = gravatar_id
    self.url = url
    self.html_url = html_url
    self.followers_url = followers_url
    self.following_url = following_url
    self.gists_url = gists_url
    self.starred_url = starred_url
    self.subscriptions_url = subscriptions_url
    self.organizations_url = organizations_url
    self.repos_url = repos_url
    self.events_url = events_url
    self.received_events_url = received_events_url
    self.type = type
    self.site_admin = site_admin
    self.name = name
    self.company = company
    self.blog = blog
    self.location = location
    self.email = email
    self.hireable = hireable
    self.bio = bio
    self.public_repos = public_repos
    self.public_gists = public_gists
    self.followers = followers
    self.following = following
    self.created_at = created_at
    self.updated_at = updated_at
    self.private_gists = private_gists
    self.total_private_repos = total_private_repos
    self.owned_private_repos = owned_private_repos
    self.disk_usage = disk_usage
    self.collaborators = collaborators
    self.two_factor_authentication = two_factor_authentication
    self.plan = plan

'''
Prints constructor code based on api data passed in
'''
def printInit(obj):
    print("def __init__(self",end="")
    for i in obj.json():
        print(", "+str(i), end=" ")
    print("):")
    for i in obj.json():
        print("\tself."+str(i)+" = "+str(i))

def __str__(self):
    print(vars(self))
    return str(vars(self))

for i in sampleUser.json():

    print("self."+i+" = "+i)
    #print({i:sampleUser.json()[i]})


#printInit(suRepos)
rDict = {}
for i in suRepos.json():
    #rList.append(i)
    print(i)
    print()
    #rDict.update({i:suRepos.json()[i]})
reps = repos(rDict)
print(reps)
end
userPropList = []
for i in sampleUser.json():
    #print(i+":"+str(sampleUser.json()[i]))
    userPropList.append(sampleUser.json()[i])
u1 = user(*userPropList)

repoPropList =[]
for i in demo_repo.json():
    #print(i+":"+str(demo_repo.json()[i]))
    repoPropList.append(demo_repo.json()[i])
dr = repo(*repoPropList)

print(dr)
